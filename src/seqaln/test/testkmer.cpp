#include "kmer.h"
#include <algorithm>
#include <iostream>
#include <iterator>
#include <bioseq.h>
#include <fstream>
#include <bitset>
// template version
#include "kmert.h"

using namespace std;

void testLongseq();
void testKmer() {
   //string file="/home/kzhou/work/metag/Accs_sidconsensus.fas";
   string file="/home/kzhou/work/metag/test20.fas";
   ifstream inf(file);
   if (inf.fail()) {
      throw runtime_error("failed to open " + file);
   }
   DNA dna;
   while (dna.read(inf)) {
      cout << dna.getName() << endl;
      Kmer k4mer(dna.getSequence());
      //k4mer.showLocation();
      k4mer.showFragment();
      cout << "======= revcomp =============\n";
      Kmer k4merrc(dna.revcompCopy().getSequence());
      //k4merrc.showLocation();
      k4merrc.showFragment();
      cout << endl;
   }
}

KmerCount readLibrary(const string &libfile, int width) {
   ifstream inf(libfile);
   if (inf.fail()) {
      throw runtime_error("failed to open reference library file: " + libfile);
   }
   DNA dna;
   KmerCount counter(width);
   while (dna.read(inf)) {
      counter(dna.getSequence(),2);
   }
   //cout << counter << endl;
   vector<double> freq=counter.getFrequency();
   vector<double> rcfreq=counter.getRCFrequency();
   double sum=0;
   for (size_t i=0; i<freq.size(); ++i) {
      //double diff = pow(freq[i]-rcfreq[i], 2);
      //cout << freq[i] << " " << rcfreq[i] << " " << diff << endl;
      //sum += diff;
      sum += pow(freq[i]-rcfreq[i], 2);
   }
   cout << "forward / backward D2 distance: " << sqrt(sum) << endl;
   //return pair<vector<double>, vector<double> >(freq, rcfreq);
   cout << "library read from " << libfile << endl;
   return counter;
}

void testCounter() {
   string rootdir="/home/kzhou/work/metag/refseq/";
   string libfile=rootdir + "silva123BacteriaNON.fas";
   KmerCount libcounter = readLibrary(libfile, 5);
   libcounter.save(rootdir + "silva123Bacteria.kmc");
   KmerCount refkmer;
   refkmer.open(rootdir + "silva123Bacteria.kmc");
   // no read some test input
   string file="/home/kzhou/work/metag/test20.fas";
   ifstream inf(file);
   if (inf.fail()) {
      throw runtime_error("failed to open " + file);
   }
   DNA dna;
   while (dna.read(inf)) {
      KmerCount kc(5);
      cout << dna.getName() << endl;
      kc(dna.getSequence(),2);
      refkmer.sameDirection(kc);
   }
}

void testKmert() {
   //               0    5    10        20        30        40        50        60        70             
   //               50  47  35  14  29  40  32  39  38  27  31  4   14  2   24  44  32  61  61
   //                8   63  15  58  52  33  1   30  26  46  60  17  57  11  34  35  2   53  
   //                 34  62  60  41  18  6   6   58  41  57  48  4   36  45  9   14  11  23  
   //                  11, 56, 51, 39, 10, 24, 25, 41, 38, 39, 1,  19, 16, 54, 38, 56, 47, 31, 
   string shortseq="TAGAGTTTGATTATGGCTCAGGACGAACGCTGGCGGCGTGCTTAACACATGCAAGTCGAGCGATGAAGTTCCTTC"; // length = 75
   //               ATCTCAAACTAATACCGAGTCCTGCTTGCGACCGCCGCACGAATTGTGTACGTTCAGCTCGCTACTTCAAGGAAG 
   //                   |         |         |         |         |         |         |    5    0
   //                   70        60        50        40        30        20        10
   //                                                                                     32  32
   //                                                                                    1   2
   //                                                                                       10
   //                                                                                      40
   vector<int> expectedHV = {50, 8, 34, 11, 47, 63, 62, 56, 35, 15, 60, 51, 14, 58, 41, 39, 29, 52, 18, 10, 40, 33, 6, 24, 32, 1, 6, 25, 39, 30, 58, 41, 38, 26, 41, 38, 27, 46, 57, 39, 31, 60, 48, 1, 4, 17, 4, 19, 14, 57, 36, 16, 2, 11, 45, 54, 24, 34, 9, 38, 24, 35, 14, 56, 32, 2, 11, 47, 61, 53, 23, 31, 61};
   vector<int> expectedHV_rc = {32, 2, 10, 40, 32, 1, 7, 31, 61, 52, 19, 13, 54, 25, 39, 29, 54, 24, 33, 7, 31, 62, 57, 36, 19, 14, 59, 46, 59, 47, 60, 48, 2, 9, 36, 17, 6, 25, 37, 22, 25, 37, 20, 18, 9, 38, 27, 47, 61, 54, 27, 45, 53, 23, 30, 56, 34, 9, 37, 20, 19, 12, 48, 3, 13, 52, 16, 0, 1, 7, 29, 55, 28};

   Kmert<3> kmer3(shortseq);
   cout << "hash value:\n";
   kmer3.showHashval();
   assert(expectedHV == kmer3.getHashValue());
   //cout << "kmer location\n";
   //kmer3.showLocation();
   string shortseq_rc=reverseComplement(shortseq);
   Kmert<3> kmer3rc(shortseq_rc);
   cout << "hash value of rc\n";
   kmer3rc.showHashval();
   cout << "Test revcompBits()\n";
   cout << kmer3.revcompBits(50) << " should be 28\n";
   assert(kmer3.revcompBits(50) == 28);
   //////////////////////////////////////////////// test palindrome
   string testseq="TAGAGTTTGATTATGGCTCAGGACGAACGCTGGCGGCGTGCTTAACACATGCAAGTCGAGCGATGAAGTTCCTTCGGGAACGGATTAGCGGCGGACGGGTGAGTAACACGTGGGTAACCTGCCTCATAGAGGGGAATAGCCTTTCGAAAGGAAGATTAATACCGCATAAGATTGTAGTGCCGCATGGCATAGCAATTAAAGGAGTAATCCGCTATGAGATGGACCCGCGTCGCATTAGCTAGTTGGTGAGGTAACGGCTCACCAAGGCGACGATGCGTAGCCGACCTGAGAGGGTGATCGGCCACATTGGGACTGAGACACGGCCCAGACTCCTACGGGAGGCAGCAGTGGGGAATATTGCACAATGGGGGAAACCCTGATGCAGCAACGCCGCGTGAGTGATGACGGTCTTCGGATTGTAAAGCTCTGTCTTCAGGGACGATAATGACGGTACCTGAGGAGGAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTGTCCGGATTTACTGGGCGTAAAGGGAGCGTAGGTGGATATTTAAGTGGGATGTGAAATACTCGGGCTTAACCTGGGTGCTGCATTCCAAACTGGATATCTAGAGTGCAGGAGAGGAAAGTAGAATTCCTAGTGTAGCGGTGAAATGCGTAGAGATTAGGAAGAATACCAGTGGCGAAGGCGACTTTCTGGACTGTAACTGACACTGAGGCTCGAAAGCGTGGGGAGCAAACAGGATTAGATACCCTGGTAGTCCACGCCGTAAACGATGAATACTAGGTGTAGGGGTTGTCATGACCTCTGTGCCGCCGCTAACGCATTAAGTATTCCGCCTGGGGAGTACGGTCGCAAGATTAAAACTCAAAGGAATTGACGGGGCCCGCACAAGCAGCGGAGCATGTGGTTTAATTCGAAGCAACGCGAAGAACCTTACCTAGACTTGACATCTCCTGAATTACCCTTAATCGGGGAAGCCCTTCGGGGCAGGAAGACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCTTATTGTTTAGTTGCTACCATTTAGTTGAGCACTCTAGCGAGACTGCCCGGGTTAACCGGGAGGAAGGTGGGGATGACGTCAAATCATCATGCCCCTTATGTCTAGGGCTACACACGTGCTACAATGGCTGGTACAGAGAGATGCTAAACCGTGAGGTGGAGCCAAACTTTAAAACCAGTCTCAGTTCGGATTGTAGGCTGAAACTCGCCTACATGAAGCTGGAGTTGCTAGTAATCGCGAATCAGAATGTCGCGGTGAATACGTTCCCGGGCCTTGTACACACCGCCCGTCACACCAATCGCTGACCCTACCTTAGGTCGCTGCCCCGCTTGCGCGTTAGCTCACGAACTTTGGGTATTGCCAACTCTCATGGTGTGACCGGGCGGTGTGTACAAGGCCCGGGAACGTATTCACCGCGACATTCTGATTCGCGATTACTAGCAACTCCAGCTTCATGTAGGCGAGTTTCAGCCTACAATCCGAACTGAGACTGGTTTTAAAGTTTGGCTCCACCTCACGGTTTAGCATCTCTCTGTACCAGCCATTGTAGCACGTGTGTAGCCCTAGACATAAGGGGCATGATGATTTGACGTCATCCCCACCTTCCTCCCGGTTAACCCGGGCAGTCTCGCTAGAGTGCTCAACTAAATGGTAGCAACTAACAATAAGGGTTGCGCTCGTTGCGGGACTTAACCCAACATCTCACGACACGAGCTGACGACAAACCATGCACCACCTGTCTTCCTGCCCCGAAGGGCTTCCCCGATTAAAGGTAATTCAGGAGATGTCAAGTCTAGGTAAGGTTCTTCGCGTTGCTTCGAATTAAACCACATGCTCCGCTGCTTGTGCGGGCCCCCGTCAATTCCTTTGAGTTTTAATCTTGCGACCGTACTCCCCAGGCGGAATACTTAATGCGTTAGCGGCGGCACAGAGGTCATGACAACCCCTACACCTAGTATTCATCGTTTACGGCGTGGACTACCAGGGTATCTAATCCTGTTTGCTCCCCACGCTTTCGAGCCTCAGTGTCAGTTACAGTCCAGAAAGTCGCCTTCGCCACTGGTATTCTTCCTAATCTCTACGGCATTTCACCGCTACACTAGGAATTCTACTTTCCTCTCCTGCACTCTAGATATCCAGTTTGGAATGCAGCACCCAGGTTAAGCCCGAGTATTTCACATCCCACTTAAATATCCACCTACGCTCCCTTTACGCCCAGTAAATCCGGACAACGCTTGCCACCTACGTATTACCGCGGCTGCTGGCACGTAGTTAGCCGTGGCTTCCTCCTCAGGTACCGTCATTATCGTCCCTGAAGACAGAGCTTTACAATCCGAAGACCGTCATCACTCACGCGGCGTTGCTGCATCAGGGTTTCCCCCATTGTGCAATATTCCCCACTGCTGCCTCCCGTAGGAGTCTGGGCCGTGTCTCAGTCCCAATGTGGCCGATCACCCTCTCAGGTCGGCTACGCATCGTCGCCTTGGTGGAGCCGTTACCTCACCAACTAGCTAATGCGACGCAGGTCCATCTCATAGCGGATTACTCCTTTAATTGCTATGCCATGCGGCACTACAATCTTATGCGGTATTAATCTTCCTTTCGAAAGGCTATTCCCCTCTATGAGGCAGGTTACCCACGTGTTACTCACCCGTCCGCCGCTAATCCATTCCCGAAGGAACTTCATCGCTCGACTTGCATGTGTTAAGCACGCCGCCAGCGTTCGTCCTGAGCCATAATCAAACCCTA";
   string testseq_rc = reverseComplement(testseq);
   Kmert<6> kmer5(testseq); // actually 6
   Kmert<6> kmer5rc(testseq_rc);
   cout << "\nhasval from top strand\n";
   kmer5.showHashval();
   cout << "\nhasval from bottom strand\n";
   kmer5rc.showHashval();
   cout << "forward direction\n";
   kmer5.showLocation();
   cout << "reverse direction\n";
   //kmer5rc.showLocation();
   //cout << "locations\n";
   //kmer5.showLocation();
   //cout << "fragments\n";
   //kmer5.showFragment();
   cout << "computing double kmers\n";

   vector<double> freq;
   vector<double> rcfreq;
   pair<int,int> loopReg;
   if (kmer5.isPalindrome(loopReg, freq,rcfreq)) {
      cout << "loop region: " << loopReg.first << "-" << loopReg.second << endl;
   }
   testLongseq();
}


int main(int argc, char* argv[]) {
   /*
   string seq="AAAACCCCCCGGGGGTTTTTACGGCATACGCATCCGTACGTGAC";
   vector<int> hashval=Kmer::hashArray(seq, 3);
   copy(hashval.begin(), hashval.end(), ostream_iterator<int>(cout, ","));
   cout << endl;
   cout << pow(4, 5) << "  " << (2<<9) << endl;
   */
   cout << pow(4, 4) << "  shift 2 for 2k-1: " << (2<<(2*4-1)) << endl
      << " 4 shift k: " << (4<<4) << endl;
   unsigned int val=255;
   cout << 1 << "netative of 1" << (~1) << endl;
   unsigned int compval= val&(~val);
   cout << val << " " << compval << endl;
   cout << bitset<32>(val) << endl;
   cout << bitset<32>(1) << endl;
   cout << bitset<32>(compval) << endl;

   //testKmer();
   //testCounter();
   testKmert();

   return 0;
}

void testLongseq() {
   string seq="TTGGTTACCTTGTTACGACTTCACCCCAATTATCTGTCCCACCTTCGGCGGCTGGCTCCATAAAGGTTACCCTACCCGACTTCGGGTGTTACAAACTCTCGTGGTGTGACGGGCGGTGTGTACAAGGCCCGGGAACGTATTCACGTGGCATGCTGATCCACGATTACTAGCGATTCCGGCTTCATGTAGGCGAGTTGCAGCCTACAATCCGAACTGAGAATAGTTTTATGGGATTAGCTCCACCTCGCGGCTTCGCGACCCTTTGTACTATCCATTGTAGCACGTGTGTAGCCCAGGTCATAAGGGGCATGATGATTTGACGTCATCCCCACCTTCCTCCGGCTTGCACGGCAGTCACTTTAGAGTGCCCAACTAAATGCTGGCAACTAAAATCAAGGGTTGCGCTCGTTGCGGGACTTAACCCAACATCTCACGACACGAGCTGACGACAACCATGCACCACCTGTCACTTTGTCCCCGAAGGGAAAGCTCTGTCTCCAGAGTGGTCAAAGGATGTCAAGACCTGGTAAGGTTCTTCGCGTTGCTTCGAATTAAACCACATGCTCCACCGCTTGTGCGGGCCCCCCGTCAATTCCTTTGAGTTTCAACCTTGCGGTCGTACTCCCCAGGCGGAGTGCTTAATGCGTTAGCTGCAGCACTAAGGGGCGGAAACCCCCTAACACTTAGCACTCATCGTTTACGGCGTGGACTACCAGGGTATCTAATCCTGTTTGCTCCCCACGCTTTCGCGCCTCAGCGTCAGTTACAGACCAGAGAGTCGCCTTCGCCACTGGTGTTCCTCCACATATCTACGCATTTCACCGCTACACGTGGAATTCCACTCTCCTCTTCTGCACTCCAGTCTTCCAGTTTCCAATGACCCTCCCCGGTTAAGCCGGGGGCTTTCACATCAGACTTAAAAGACCGCCTGCGCCGCGCTTTACGCCCAATAAATCCGGACAACGCTTGCCACCTACGTATTACGCGGCTGCTGGCACGTAGTTAGCCGTGGCTTTCTGGTTAGATACCGTCAAGGGACAAGCAGTTACTCTTATCCTTGTTCTTCTCTAACAACAGTACTTTACGATCCGAAAACCTTCTTCATACACGCGGCGTTGCTCCGTCAGACTTTCGTCCATTGCGGAAGATTCCCTACTGCTGCCTCCCGTAGGAGTCTGGGCCGTGTCTCAGTCCCAGTGTGGCCGATCACCCTCTCAGGTCGGCTATGCATCGTTGCCTTGGTAGGCCATTACCCTACCAACTAGCTAATGCACCGCGGGCCCATCTGTAAGCGATAGCCGAAACCATCTTTCAAAAGCGTGGCATGCGCCACACTTTATCATTCGGTATTAGCCCCGGTTTCCCGGAGTTATCCCCAACTTACAGGCAGGTTGCCCACGTGTTACTCACCCGTCCGCCACTAACATTGGAAGAGCAAGCTCTTCCTCCGTTCGTTCGACTTGCATGTATTAGGCACGCCGCCAGCGTTCGTCCTGAGCCAGAATCAAACCCTAGGGTTTGATTCTGGCTCAGGACGAACGCTGGCGGCGTGCCTAATACATGCAAGTCGAACGAACGGAGGAAGAGCTTGCTCTTCCAATGTTAGTGGCGGACGGGTGAGTAACACGTGGGCAACCTGCCTGTAAGTTGGGGATAACTCCGGGAAACCGGGGCTAATACCGAATGATAAAGTGTGGCGCATGCCACGCTTTTGAAAGATGGTTTCGGCTATCGCTTACAGATGGGCCCGCGGTGCATTAGCTAGTTGGTAGGGTAATGGCCTACCAAGGCAACGATGCATAGCCGACCTGAGAGGGTGATCGGCCACACTGGGACTGAGACACGGCCCAGACTCCTACGGGAGGCAGCAGTAGGGAATCTTCCGCAATGGACGAAAGTCTGACGGAGCAACGCCGCGTGTATGAAGAAGGTTTTCGGATCGTAAAGTACTGTTGTTAGAGAAGAACAAGGATAAGAGTAACTGCTTGTCCCTTGACGGTATCTAACCAGAAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTGTCCGGATTTATTGGGCGTAAAGCGCGCGCAGGCGGTCTTTTAAGTCTGATGTGAAAGCCCCCGGCTTAACCGGGGAGGTCATTGGAAACTGGAAGACTGGAGTGCAGAAGAGGAGAGTGGAATTCCACGTGTAGCGGTGAAATGCGTAGATATGTGGAGGAAACACCAGTGGCGAAGGCGACTCTCTGGTCTGTAACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGGATTAGATACCCTGGTAGTCCACGCCGTAAACGATGAGTGCTAAGTGTTAGGGGGTTTCCGCCCCTTAGTGCTTGCAGCTAACGCATTAAGCACTCCGCCTGGGGAGTACGACCGCAAGGTTGAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGAGCATGTGGTTTAATTCGAAGCAACGCGAAGAACCTTACCAGGTCTTGACATCCTTTGACCACTCTGGAGACAGAGCTTTCCCTTCGGGGACAAAGTGACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCTTGATTTTAGTTGCCAGCATTTAGTTGGGCACTCTAAAGTGACTGCCGGTGCAAGCCGGAGGAAGGTGGGGATGACGTCAAATCATCATGCCCCTTATGACCTGGGCTACACACGTGCTACAATGGATAGTACAAAGGGTCGCGAAGCCGCGAGGTGGAGCTAATCCCATAAAACTATTCTCAGTTCGGATTGTAGGCTGCAACTCGCCTACATGAAGCCGGAATCGCTAGTAATCGTGGATCAGCATGCCACGGTGAATACGTTCCCGGGCCTTGTACACACCGCCCGTCACACCACGAGAGTTTGTAACACCCGAAGTCGGTAGGGTAACCTTTATGGAGCCAGCCGCCGAAGGTGGGACAGATAATTGGGGTGAAGTCGTAACAAGGTAACCA";
   cout << "test longsequence of " << seq.length() << "nt\n";
   Kmert<6> kmer6(seq); 
   pair<int,int> loopReg;
  // if (kmer6.isPalindrome(loopReg)) {
    //  cout << "testLongseq() loop region: " << loopReg.first << "-" << loopReg.second << endl;
  // }
}
